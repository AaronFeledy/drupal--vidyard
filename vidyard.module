<?php

/**
 * @file
 * Contains vidyard.module.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\FormatterInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function vidyard_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the Vidyard module.
    case 'help.page.vidyard':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('A Media source and oEmbed provider for the Vidyard video platform.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_media_source_info_alter().
 */
function vidyard_media_source_info_alter(array &$sources) {
  // Add Vidyard as an available provider for the Remote Video media source.
  $sources['oembed:video']['providers'][] = "Vidyard";
}

/**
 * Implements hook_field_formatter_third_party_settings_form().
 */
function vidyard_field_formatter_third_party_settings_form(FormatterInterface $plugin, FieldDefinitionInterface $field_definition, $view_mode, $form, FormStateInterface $form_state) {
  $element = array();

  // Add a setting to enable Vidyard's responsive embed code to the oEmbed field
  // display formatter options form. This option is provided because Vidyard's
  // oEmbed implementation returns their v3 embed code which is not responsive.
  if ($plugin->getPluginId() == 'oembed') {
    // TODO: Only add this if Vidyard is a provider on this field.
    $element = [
      'vidyard_responsive' => [
        '#type' => 'checkbox',
        '#title' => t('Use responsive embed code for Vidyard videos'),
        '#default_value' => $plugin->getThirdPartySetting('vidyard', 'vidyard_responsive'),
      ],
    ];
  }
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary_alter().
 */
function vidyard_field_formatter_settings_summary_alter(&$summary, $context) {
  // Add a line to the oEmbed field formatter settings summary to indicate that
  // Vidyard's responsive embed code setting is enabled.
  /** @var \Drupal\Core\Field\FormatterInterface $formatter */
  $formatter = $context['formatter'];
  if ($formatter->getPluginId() == 'oembed') {
    if ($formatter->getThirdPartySetting('vidyard', 'vidyard_responsive')) {
      $summary[] = t('Responsive embed enabled for Vidyard videos.');
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view_alter.
 */
function vidyard_media_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  // Alter fields that have Vidyard responsive embed enabled.
  foreach ($display->getComponents() as $name => $options) {
    if (!empty($options['third_party_settings']['vidyard']['responsive'])) {
      // Add the Vidyard embed API script to <head>
      $build['#attached']['library'][] = 'vidyard/embed-v4';

      // Override the Media oEmbed iframe formatter, converting it to an
      // img containing the attributes to meet the Vidyard API specs. We can
      // swap out the iframe because we are building the embed HTML ourselves
      // and therefore we can trust it (the iframe is a security feature to
      // add a degree of sandboxing to code that comes from a third party oEmbed
      // provider). This also enables us to avoid repeatedly loading the the
      // Vidyard API script when there are multiple videos on a page. The script
      // will replace these images with the video embed code.
      foreach ($build[$name] as $key => $field_value) {
        if (is_numeric($key)) {
          $vidyard_url = $entity->get($name)->getValue()[$key]['value'];
          if ($vidyard_id = vidyard_get_id($vidyard_url)) {
            $build[$name][$key]['#tag'] = 'img';
            $build[$name][$key]['#attributes']['src'] = sprintf("https://play.vidyard.com/%s.jpg", $vidyard_id); //TODO: Use local thumbnail image
            $build[$name][$key]['#attributes']['class'][] = 'vidyard-player-embed';
            $build[$name][$key]['#attributes']['data-uuid'] = $vidyard_id;
            $build[$name][$key]['#attributes']['data-v'] = '4';
            $build[$name][$key]['#attributes']['data-type'] = 'inline';
            $build[$name][$key]['#attributes']['data-preload'] = 'none'; //TODO: Make this a setting
            unset($build[$name][$key]['#attributes']['frameborder']);
            unset($build[$name][$key]['#attributes']['scrolling']);
            unset($build[$name][$key]['#attributes']['allowtransparency']);
            unset($build[$name][$key]['#attributes']['width']);
            unset($build[$name][$key]['#attributes']['height']);
          }
        }
      }
      break;
    }
  }
}

/**
 * Get the Vidyard video ID from the video URL.
 *
 * @param string $url
 *   The URL for the Vidyard video.
 *
 * @return mixed
 *   Returns a string containing the video id or FALSE if and ID is not found.
 */
function vidyard_get_id($url) {
  $reg = "/(http(s?):)?\/\/[a-zA-Z0-9]+\.vidyard.com\/(?:share|watch)?(\/)?(?<id>[a-zA-Z0-9_-]+)/";
  preg_match($reg, $url, $matches);

  return isset($matches['id']) ? $matches['id'] : FALSE;
}
